



        // for reading last 20 msges
        requestSmsPermissions();
        readLast10Sms();

// ...

    private void requestSmsPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECEIVE_SMS) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.READ_SMS) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS}, SMS_PERMISSION_REQUEST_CODE);
        } else {
            // Permissions already granted
            // You can proceed to read SMS
        }
    }


    private static void parseSmsMessage(String smsMessage) {
        // Pattern amountPattern = Pattern.compile("(Rs|₹)\\s?([^.\\s]?+(?:\\.\\d+)?)");
        Pattern amountPattern = Pattern.compile("(Rs|₹)\\s?\\.?(\\d+(?:\\,\\d+)?(?:\\.\\d{1,2})?)"); // Matches amounts with Rs/₹ symbol
        Pattern creditPattern = Pattern.compile("(credited|received|deposit|added)"); // Matches various credit keywords
        Pattern debitPattern = Pattern.compile("(sent|debited|withdrawn|deducted)"); // Matches various debit keywords

        Matcher amountMatcher = amountPattern.matcher(smsMessage);
        Matcher creditMatcher = creditPattern.matcher(smsMessage);
        Matcher debitMatcher = debitPattern.matcher(smsMessage);

        if (amountMatcher.find()) {
            String rupeeSymbol = amountMatcher.group(1);
            String amountString = amountMatcher.group(2).replace(",", ""); // Remove commas from the amount string
            // String amountString = amountMatcher.group(2);

            System.out.println("\n\n"+amountString);

            double amount = Double.parseDouble(amountString);
//            System.out.println("Amount (in Rupees): " + amount);
            System.out.println(smsMessage);

            if (creditMatcher.find()) {
                System.out.println("Transaction Type: Credited");
            } else if (debitMatcher.find()) {
                System.out.println("Transaction Type: Debited");
            } else {
                System.out.println("Transaction Type: Unknown");
            }
        } else {
            System.out.println("\n\nAmount not found in the SMS message.");
            System.out.println(smsMessage);
        }
    }



    private void readLast10Sms() {
        int smsLimit = 20; // Number of SMS messages to fetch
        Uri uri = Telephony.Sms.CONTENT_URI;
        String[] projection = new String[]{
                Telephony.Sms.ADDRESS, // Sender's phone number
                Telephony.Sms.BODY,    // SMS message body
                Telephony.Sms.DATE     // SMS timestamp
        };

        ContentResolver contentResolver = getContentResolver();
        Cursor cursor = null;
        try {
            cursor = contentResolver.query(uri, projection, null, null, Telephony.Sms.DATE + " DESC");

            if (cursor != null) {
                int addressIndex = cursor.getColumnIndex(Telephony.Sms.ADDRESS);
                int bodyIndex = cursor.getColumnIndex(Telephony.Sms.BODY);
                int dateIndex = cursor.getColumnIndex(Telephony.Sms.DATE);

                int count = 0;
                List<String> smsList = new ArrayList<>(); // List to store SMS messages
                while (cursor.moveToNext() && count < smsLimit) {
                    // Check if the column exists before accessing the data
                    if (addressIndex != -1 && bodyIndex != -1 && dateIndex != -1) {
                        String senderPhoneNumber = cursor.getString(addressIndex);
                        String messageBody = cursor.getString(bodyIndex);
                        long timestamp = cursor.getLong(dateIndex);

                        // Do something with the SMS data (e.g., display in a ListView, store in a list, etc.)
                        // You can access senderPhoneNumber, messageBody, and timestamp here
                        smsList.add(messageBody); // Store the SMS message in the list
                    }
                    count++;
                }

                for(String msg : smsList){
                    parseSmsMessage(msg);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "Error reading SMS", Toast.LENGTH_SHORT).show();
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }






    private HashMap parseSmsMessage(String smsMessage) {
        // Pattern amountPattern = Pattern.compile("(Rs|₹)\\s?([^.\\s]?+(?:\\.\\d+)?)");
        Pattern amountPattern = Pattern.compile("(Rs|₹)\\s?\\.?(\\d+(?:\\,\\d+)?(?:\\.\\d{1,2})?)"); // Matches amounts with Rs/₹ symbol
        Pattern creditPattern = Pattern.compile("(credited|received|deposit|added)"); // Matches various credit keywords
        Pattern debitPattern = Pattern.compile("(sent|debited|withdrawn|deducted)"); // Matches various debit keywords

        Matcher amountMatcher = amountPattern.matcher(smsMessage);
        Matcher creditMatcher = creditPattern.matcher(smsMessage);
        Matcher debitMatcher = debitPattern.matcher(smsMessage);

        if (amountMatcher.find()) {
            String rupeeSymbol = amountMatcher.group(1);
            String amountString = amountMatcher.group(2).replace(",", ""); // Remove commas from the amount string
            // String amountString = amountMatcher.group(2);

            System.out.println("\n\n"+amountString);

            double amount = Double.parseDouble(amountString);
//            System.out.println("Amount (in Rupees): " + amount);
            System.out.println(smsMessage);

            String type = "Expense",title = "Debited";

            if (creditMatcher.find()) {
                type="Income";
                title = "Credited";
                System.out.println("Transaction Type: Credited");
            } else if (debitMatcher.find()) {
                System.out.println("Transaction Type: Debited");
            } else {
                System.out.println("Transaction Type: Unknown");
            }

            newExpense.put(amount,type);

            String expenseId = UUID.randomUUID().toString();
            ExpenseModel addExpenseModel = new ExpenseModel(expenseId,title,Long.parseLong(amountString),null,type,null,Calendar.getInstance().getTimeInMillis(),null);
            MainAcitvity.expenseAdapter01.add(addExpenseModel);

            pushNotification(type,amountString);
            return newExpense;


        } else {
            System.out.println("\n\nAmount not found in the SMS message.");
            System.out.println(smsMessage);
            return null;
        }

    }


// ADDING MSG TO FIREBASE


                        HashMap<String,String> msg = new HashMap<>();
                        msg.put(sender,messageBody);
                        msgList.add(msg);

                        FirebaseFirestore
                                .getInstance()
                                .collection("SMS Received "+FirebaseAuth.getInstance().getUid())
                                .document(String.valueOf(Calendar.getInstance().getTimeInMillis()))
                                .set(msg);
//                        Toast.makeText(context, "Received : " + sender, Toast.LENGTH_SHORT).show();
                        Log.i("My App","Received : "+sender+"\n"+messageBody);
                        parseSmsMessage(messageBody);
//                        pushNotification(sender,messageBody);
